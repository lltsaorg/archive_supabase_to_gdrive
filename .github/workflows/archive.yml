name: Archive to Drive

on:
  workflow_dispatch:
    inputs:
      archive_test_days:
        description: "Test: use N days instead of months (empty to disable)"
        required: false
        default: ""
      archive_force_run:
        description: "Test: set 1/true to bypass first-day (empty/0=false)"
        required: false
        default: "0"
  schedule:
    - cron: "15 17 * * *"

jobs:
  archive:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install deps
        run: npm ci || npm i

      - name: Create .env.local for Drive OAuth
        run: |
          cat > .env.local <<EOF
          GCP_OAUTH_CLIENT_ID=${{ secrets.GCP_OAUTH_CLIENT_ID }}
          GCP_OAUTH_CLIENT_SECRET=${{ secrets.GCP_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_REFRESH_TOKEN=${{ secrets.GOOGLE_OAUTH_REFRESH_TOKEN }}
          GDRIVE_FOLDER_ID_TRANSACTIONS=${{ secrets.GDRIVE_FOLDER_ID_TRANSACTIONS }}
          GDRIVE_FOLDER_ID_CHARGEREQUESTS=${{ secrets.GDRIVE_FOLDER_ID_CHARGEREQUESTS }}
          EOF

      # Removed dry-run Drive check to avoid insufficient scope errors

      - name: Run archiver (always writes result.json)
        id: run
        continue-on-error: true # 失敗でも後続でメール可
        run: node scripts/archive_multi_to_gdrive.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          # Archive period (months). Not a secret.
          # Defaults to 6 if unset.
          CUTOFF_MONTHS_DEFAULT: ${{ vars.CUTOFF_MONTHS_DEFAULT }}
          # Test mode (optional): prefer inputs; fallback to repository vars
          ARCHIVE_TEST_DAYS: ${{ github.event.inputs.archive_test_days || vars.ARCHIVE_TEST_DAYS }}
          ARCHIVE_FORCE_RUN: ${{ github.event.inputs.archive_force_run || vars.ARCHIVE_FORCE_RUN }}

      - name: Parse executed flag
        id: parse
        run: |
          # result.json はアーカイブスクリプトが必ず出力
          EXECUTED=$(node -e "const fs=require('fs');let j={};try{j=JSON.parse(fs.readFileSync('result.json','utf8'))}catch{};process.stdout.write(j.executed?'true':'false');")
          echo "executed=$EXECUTED" >> $GITHUB_OUTPUT

      - name: Send Gmail notification (only if executed)
        if: steps.parse.outputs.executed == 'true'
        run: node scripts/send_gmail.js result.json
        env:
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          GMAIL_SENDER: ${{ secrets.GMAIL_SENDER }}
          NOTIFY_EMAIL: ${{ secrets.NOTIFY_EMAIL }}
